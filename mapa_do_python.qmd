---
title: "Mapa do Python"
author: "Jeanne Franco"
format: html
editor: visual
date: today
lang: pt
---

# Mapa do Python

### Operadores

Operadores númericos: adição (`+`), subtração (`-`), multiplicação (`*`), exponenciação (`**`), divisão (`/`).

Operadores de comparação: `>`, `<`, `>=`, `<=`, `==`.

Operadores lógicos: `and`, `or`, `not`.

### Tipos de dados

String:`type("palavra")`.

Inteiro: `type(2)`.

Float:`type(1.4)`.

Booleano: `type(True)`.

### Coleções

Listas: `lista = [1, 2, 3]`.

Dicionários: `dicionario = {"chave" : "valor"}`.

Tuplas: `tupla = (1, 2, 3)`.

Conjuntos: `conjunto = set([1, 2, 3])`.

### Variáveis

Exemplos de variáveis:

`variavel1 = 3`

`variavel2 = variavel1 + 3`

### Condicionais

Condições: `if` e `elif` e `else`.

Loop for: `for i in range(número)`.

Loop while: `while` e `break`.

``` python
# condicionais if e else
if 3 < 6:
    print("verdadeiro")
else:
    print("falso")

# Loop for i in range
variavel1 = 1
for i in range(5):
    print("sequencia")

# Loop while e break
variavel2 = 0
while variavel2 < 6:
    print("continua")
    variavel2 = variavel2 + 1
    if variavel2 == 5:
        break
print("ok")
```

### Entradas e saídas

Entradas: `valor = float(input("Digite um número:"))`.

Saídas: `print("O número é {:.2f}!" .format(valor))`.

### Manipulação de arquivos

``` python
with open("C:/dir/arquivo.txt", "w") as arquivo:
  texto = "Minhas anotações"
  arquivo.write(texto)
  arquivo.close()
```

### Funções e classes

Exemplo de funções e classes:

``` python
# Criando funções
def sistema_planetario():
    planeta = input("Digite aqui o planeta")
    if planeta == "Terra":
      print("O planeta Terra é o ...")
    elif planeta == "Marte":
      print("O planeta Marte é o...")
    elif planeta == "Netuno":
      print("O planeta Netuno é o...")
    else:
      print("Planeta indefinido.")
      
#####################################################

def minha_funcao():
  print("Minha primeira função.")

#####################################################
```

``` python
class Cliente:
    def __init__(self, nome, email, plano):
        self.nome = nome
        self.email = email
        lista_planos = ["basic", "premium"]
        if plano in lista_planos:
            self.plano = plano
        else: 
            raise Exception("Plano inválido.")

cliente = Cliente("Lira", "lira_python@gmail.com", "basic")
print(cliente.nome)
print(cliente.email)
print(cliente.plano)class Cliente:

    def __init__(self, nome, email, plano):
        self.nome = nome
        self.email = email
        lista_planos = ["basic", "premium"]
        if plano in lista_planos:
            self.plano = plano
        else: 
            raise Exception("Plano inválido.")

cliente = Cliente("Lira", "lira_python@gmail.com", "basic")

print(cliente.nome)
print(cliente.email)
print(cliente.plano)

#####################################################

class MinhaClasse:
  def __init__(self, nome, idade):
      self.nome =  nome
      self.idade = idade
    
  def funcao(self):
      print("Meu nome é", self.nome)
      print("Minha idade é", self.idade)
      
####################################################
```

### Módulos e pacotes

Exemplo de importação de biblioteca:

``` python
from biblioteca import funcao
```

### Ambientes virtuais

Prompt de comando: para estabelecer pastas como diretório de trabalho e fazer as instalações corretas.

![](prompt.png){fig-align="center"}

### Erros e exceções

Tratamento de erro: após executar uma tarefa e identificar um erro, pode adicionar uma nova função para tratamento dos erros, como estabelecer uma tarefa após o erro. Isso é importante para que o código não quebre e pare de executar a tarefa.

``` python
for i in range(10):
  try:
    
  except:
    print("Ocorreu um erro")
    continue
```

::: {.callout-note appearance="simple"}
## Executar funções:

Para executar alguma função, nós podemos criar códigos ou usar bibliotecas prontas com códigos bem elaborados que facilitam a execução de uma tarefa. Essas bibliotecas podem ser mais eficientes do que novos códigos criados permitindo ganho de tempo.
:::

## Bibliotecas

### Análise de dados e Inteligência artificial

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%
flowchart TD
    id1["`Bibliotecas Python`"]
    id1-->C("`Análise de dados e Inteligência artificial`")
    C -->D["`Numpy
           Pandas
           Matplotlib
           Seaborn
           Scikitlearn`"]
    C -- "`Farmeworks para Inteligência Artificial`" --> E["`TensorFlow, Keras, PyTorch, Theano, MxNet, Caffe, CNTK, Pillow, OpenCV, ApacheSpark, Hadoop`"]
    
    style id1 fill:#f9f,stroke:#333,stroke-width:4px
```
