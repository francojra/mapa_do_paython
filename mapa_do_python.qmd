---
title: "Mapa do Python"
author: "Jeanne Franco"
format: html
editor: visual
date: today
lang: pt
---

# Mapa do Python

### Operadores

Operadores númericos: adição (`+`), subtração (`-`), multiplicação (`*`), exponenciação (`**`), divisão (`/`).

Operadores de comparação: `>`, `<`, `>=`, `<=`, `==`.

Operadores lógicos: `and`, `or`, `not`.

### Tipos de dados

String:`type("palavra")`.

Inteiro: `type(2)`.

Float:`type(1.4)`.

Booleano: `type(True)`.

### Coleções

Listas: `lista = [1, 2, 3]`.

Dicionários: `dicionario = {"chave" : "valor"}`.

Tuplas: `tupla = (1, 2, 3)`.

Conjuntos: `conjunto = set([1, 2, 3])`.

### Variáveis

Exemplos de variáveis:

`variavel1 = 3`

`variavel2 = variavel1 + 3`

### Condicionais

Condições: `if` e `elif` e `else`.

Loop for: `for i in range(número)`.

Loop while: `while` e `break`.

``` python
# condicionais if e else
if 3 < 6:
    print("verdadeiro")
else:
    print("falso")

# Loop for i in range
variavel1 = 1
for i in range(5):
    print("sequencia")

# Loop while e break
variavel2 = 0
while variavel2 < 6:
    print("continua")
    variavel2 = variavel2 + 1
    if variavel2 == 5:
        break
print("ok")
```

### Entradas e saídas

Entradas: `valor = float(input("Digite um número:"))`.

Saídas: `print("O número é {:.2f}!" .format(valor))`.

### Manipulação de arquivos

``` python
with open("C:/dir/arquivo.txt", "w") as arquivo:
  texto = "Minhas anotações"
  arquivo.write(texto)
  arquivo.close()
```

### Funções e classes

### Módulos e pacotes

Exemplo de importação de biblioteca:

``` python
from biblioteca import funcao
```

### Ambientes virtuais

Prompt de comando: para estabelecer pastas como diretório de trabalho e fazer as instalações corretas.

![](prompt.png){fig-align="center"}

### Erros e exceções

Tratamento de erro: após executar uma tarefa e identificar um erro, pode adicionar uma nova função para tratamento dos erros, como estabelecer uma tarefa após o erro. Isso é importante para que o código não quebre e pare de executar a tarefa.

``` python
for i in range(10):
  try:
    
  except:
    print("Ocorreu um erro")
    continue
```
